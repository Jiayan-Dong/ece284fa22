$date
	Wed Oct 26 02:26:38 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mac_tb $end
$var wire 16 ! out [15:0] $end
$var reg 4 " a [3:0] $end
$var reg 4 # b [3:0] $end
$var reg 16 $ c [15:0] $end
$var reg 1 % clk $end
$var reg 16 & expected_out [15:0] $end
$var integer 32 ' i [31:0] $end
$var integer 32 ( w_dec [31:0] $end
$var integer 32 ) w_file [31:0] $end
$var integer 32 * w_scan_file [31:0] $end
$var integer 32 + x_dec [31:0] $end
$var integer 32 , x_file [31:0] $end
$var integer 32 - x_scan_file [31:0] $end
$scope function mac_predicted $end
$var reg 4 . a [3:0] $end
$var reg 4 / b [3:0] $end
$var reg 16 0 c [15:0] $end
$upscope $end
$scope function w_bin $end
$var integer 32 1 weight [31:0] $end
$upscope $end
$scope function x_bin $end
$var integer 32 2 activation [31:0] $end
$upscope $end
$scope module mac_wrapper_instance $end
$var wire 4 3 a [3:0] $end
$var wire 4 4 b [3:0] $end
$var wire 16 5 c [15:0] $end
$var wire 1 % clk $end
$var wire 16 6 out [15:0] $end
$var reg 4 7 a_q [3:0] $end
$var reg 4 8 b_q [3:0] $end
$var reg 16 9 c_q [15:0] $end
$scope module mac_instance $end
$var wire 4 : a [3:0] $end
$var wire 4 ; b [3:0] $end
$var wire 16 < c [15:0] $end
$var wire 16 = out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
b10000000000000000000000000000100 ,
bx +
bx *
b10000000000000000000000000000011 )
bx (
bx '
b0 &
0%
bx $
bx #
bx "
bx !
$end
#2
1%
#3
b0 '
0%
#4
1%
#5
b1 '
b110 &
b110 .
b1 /
b0 0
b0 $
b0 5
b1 #
b1 4
b1 1
b110 "
b110 3
b0 2
b1 -
b110 +
b1 *
b1 (
0%
#6
b110 !
b110 6
b110 =
b0 9
b0 <
b110 7
b110 :
b1 8
b1 ;
1%
#7
b10 '
b1111111111010101 &
b111 .
b1001 /
b110 0
b110 $
b110 5
b1001 #
b1001 4
b1 1
b111 "
b111 3
b1 2
b111 +
b11111111111111111111111111111001 (
0%
#8
b110 9
b110 <
b111 7
b111 :
b1111111111010101 !
b1111111111010101 6
b1111111111010101 =
b1001 8
b1001 ;
1%
#9
b11 '
b1111111111011100 &
b1 .
b111 /
b1111111111010101 0
b1111111111010101 $
b1111111111010101 5
b111 #
b111 4
b1 1
b1 "
b1 3
b1 +
b111 (
0%
#10
b1111111111010101 9
b1111111111010101 <
b1 7
b1 :
b1111111111011100 !
b1111111111011100 6
b1111111111011100 =
b111 8
b111 ;
1%
#11
b100 '
b1111111111010000 &
b11 .
b1100 /
b1111111111011100 0
b1111111111011100 $
b1111111111011100 5
b1100 #
b1100 4
b0 1
b11 "
b11 3
b1 2
b11 +
b11111111111111111111111111111100 (
0%
#12
b1111111111011100 9
b1111111111011100 <
b11 7
b11 :
b1111111111010000 !
b1111111111010000 6
b1111111111010000 =
b1100 8
b1100 ;
1%
#13
b101 '
b1111111111001010 &
b10 .
b1101 /
b1111111111010000 0
b1111111111010000 $
b1111111111010000 5
b1101 #
b1101 4
b1 1
b10 "
b10 3
b0 2
b10 +
b11111111111111111111111111111101 (
0%
#14
b1111111111010000 9
b1111111111010000 <
b10 7
b10 :
b1111111111001010 !
b1111111111001010 6
b1111111111001010 =
b1101 8
b1101 ;
1%
#15
b110 '
b1111111111000110 &
b1110 /
b1111111111001010 0
b1111111111001010 $
b1111111111001010 5
b1110 #
b1110 4
b0 1
b0 2
b11111111111111111111111111111110 (
0%
#16
b1111111111001010 9
b1111111111001010 <
b1111111111000110 !
b1111111111000110 6
b1111111111000110 =
b1110 8
b1110 ;
1%
#17
b111 '
b1111111110001010 &
b1111 .
b1100 /
b1111111111000110 0
b1111111111000110 $
b1111111111000110 5
b1100 #
b1100 4
b0 1
b1111 "
b1111 3
b1 2
b1111 +
b11111111111111111111111111111100 (
0%
#18
b1111111111000110 9
b1111111111000110 <
b1111 7
b1111 :
b1111111110001010 !
b1111111110001010 6
b1111111110001010 =
b1100 8
b1100 ;
1%
#19
b1000 '
b1111111110011110 &
b100 .
b101 /
b1111111110001010 0
b1111111110001010 $
b1111111110001010 5
b101 #
b101 4
b1 1
b100 "
b100 3
b0 2
b100 +
b101 (
0%
#20
b1111111110001010 9
b1111111110001010 <
b100 7
b100 :
b1111111110011110 !
b1111111110011110 6
b1111111110011110 =
b101 8
b101 ;
1%
#21
b1001 '
b1111111101111010 &
b110 .
b1010 /
b1111111110011110 0
b1111111110011110 $
b1111111110011110 5
b1010 #
b1010 4
b0 1
b110 "
b110 3
b0 2
b110 +
b11111111111111111111111111111010 (
0%
#22
b1111111110011110 9
b1111111110011110 <
b110 7
b110 :
b1111111101111010 !
b1111111101111010 6
b1111111101111010 =
b1010 8
b1010 ;
1%
#23
b1010 '
b1111111110001010 &
b100 .
b100 /
b1111111101111010 0
b1111111101111010 $
b1111111101111010 5
b100 #
b100 4
b0 1
b100 "
b100 3
b0 2
b100 +
b100 (
0%
#24
b1111111101111010 9
b1111111101111010 <
b100 7
b100 :
b1111111110001010 !
b1111111110001010 6
b1111111110001010 =
b100 8
b100 ;
1%
#25
b1011 '
b0 .
b10 /
b1111111110001010 0
b1111111110001010 $
b1111111110001010 5
b10 #
b10 4
b0 1
b0 "
b0 3
b0 +
b10 (
0%
#26
b1111111110001010 9
b1111111110001010 <
b0 7
b0 :
b1111111110001010 !
b1111111110001010 6
b1111111110001010 =
b10 8
b10 ;
1%
#27
b1100 '
b1111111110000110 &
b10 .
b1110 /
b1110 #
b1110 4
b0 1
b10 "
b10 3
b0 2
b10 +
b11111111111111111111111111111110 (
0%
#28
b1111111110000110 !
b1111111110000110 6
b1111111110000110 =
b10 7
b10 :
b1110 8
b1110 ;
1%
#29
b1101 '
b1 .
b0 /
b1111111110000110 0
b1111111110000110 $
b1111111110000110 5
b0 #
b0 4
b1 "
b1 3
b1 2
b1 +
b0 (
0%
#30
b1111111110000110 9
b1111111110000110 <
b1 7
b1 :
b1111111110000110 !
b1111111110000110 6
b1111111110000110 =
b0 8
b0 ;
1%
#31
b1110 '
b1111111101011110 &
b1010 .
b1100 /
b1100 #
b1100 4
b0 1
b1010 "
b1010 3
b0 2
b1010 +
b11111111111111111111111111111100 (
0%
#32
b1010 7
b1010 :
b1111111101011110 !
b1111111101011110 6
b1111111101011110 =
b1100 8
b1100 ;
1%
#33
b1111 '
b1111111101100100 &
b10 .
b11 /
b1111111101011110 0
b1111111101011110 $
b1111111101011110 5
b11 #
b11 4
b1 1
b10 "
b10 3
b0 2
b10 +
b11 (
0%
#34
b1111111101011110 9
b1111111101011110 <
b10 7
b10 :
b1111111101100100 !
b1111111101100100 6
b1111111101100100 =
b11 8
b11 ;
1%
#35
b10000 '
b1111111101011001 &
b1011 .
b1111 /
b1111111101100100 0
b1111111101100100 $
b1111111101100100 5
b1111 #
b1111 4
b1 1
b1011 "
b1011 3
b1 2
b1011 +
b11111111111111111111111111111111 (
0%
#36
b1111111101100100 9
b1111111101100100 <
b1011 7
b1011 :
b1111111101011001 !
b1111111101011001 6
b1111111101011001 =
b1111 8
b1111 ;
1%
#37
b10001 '
b1111111101010001 &
b10 .
b1100 /
b1111111101011001 0
b1111111101011001 $
b1111111101011001 5
b1100 #
b1100 4
b0 1
b10 "
b10 3
b0 2
b10 +
b11111111111111111111111111111100 (
0%
#38
b1111111101011001 9
b1111111101011001 <
b10 7
b10 :
b1111111101010001 !
b1111111101010001 6
b1111111101010001 =
b1100 8
b1100 ;
1%
#39
b10010 '
b1111111101101111 &
b110 .
b101 /
b1111111101010001 0
b1111111101010001 $
b1111111101010001 5
b101 #
b101 4
b1 1
b110 "
b110 3
b0 2
b110 +
b101 (
0%
#40
b1111111101010001 9
b1111111101010001 <
b110 7
b110 :
b1111111101101111 !
b1111111101101111 6
b1111111101101111 =
b101 8
b101 ;
1%
#41
b10011 '
b1111111101010111 &
b100 .
b1010 /
b1111111101101111 0
b1111111101101111 $
b1111111101101111 5
b1010 #
b1010 4
b0 1
b100 "
b100 3
b0 2
b100 +
b11111111111111111111111111111010 (
0%
#42
b1111111101101111 9
b1111111101101111 <
b100 7
b100 :
b1111111101010111 !
b1111111101010111 6
b1111111101010111 =
b1010 8
b1010 ;
1%
#43
b10100 '
b1111111101111111 &
b1010 .
b100 /
b1111111101010111 0
b1111111101010111 $
b1111111101010111 5
b100 #
b100 4
b0 1
b1010 "
b1010 3
b0 2
b1010 +
b100 (
0%
#44
b1111111101010111 9
b1111111101010111 <
b1010 7
b1010 :
b1111111101111111 !
b1111111101111111 6
b1111111101111111 =
b100 8
b100 ;
1%
#45
0%
#55
